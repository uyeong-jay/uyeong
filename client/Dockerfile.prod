# Stage 1: Base Node.js Image
FROM node:18-alpine AS base

# Stage 2: Install Dependencies
FROM base AS deps
RUN apk add --no-cache libc6-compat
RUN apk add --no-cache fontconfig
WORKDIR /app
COPY package.json yarn.lock* ./
RUN if [ -f yarn.lock ]; then yarn --frozen-lockfile --network-timeout 600000; \
    else echo "Lockfile not found." && exit 1; \
    fi

# Stage 3: Build the Next.js application
FROM base AS builder
WORKDIR /app

ARG NEXT_PUBLIC_PROD_URL
ARG NEXT_PUBLIC_SERVER_URL

ENV NEXT_PUBLIC_PROD_URL=${NEXT_PUBLIC_PROD_URL} \
    NEXT_PUBLIC_SERVER_URL={NEXT_PUBLIC_SERVER_URL}

COPY --from=deps /app/node_modules ./node_modules
COPY . .

RUN if [ -f yarn.lock ]; then yarn run build; \
    else echo "Lockfile not found." && exit 1; \
    fi

# Stage 4: Node.js for SSR & API
FROM base AS runner
WORKDIR /app

# Install PM2
RUN yarn global add pm2

ENV NODE_ENV=production

# Create system user and group
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

COPY --chown=nextjs:nodejs pm2.yml /app/pm2.yml

USER nextjs

EXPOSE 3000

ENV PORT=3000

ENV HOSTNAME="0.0.0.0"

CMD ["pm2-runtime", "start", "pm2.yml"]
# CMD ["node", "server.js"]

name: uyblog

services:
  server-prod:
    container_name: server-prod
    restart: unless-stopped
    build:
      context: ./server
      dockerfile: Dockerfile.prod
      args:
        NEXT_PUBLIC_PROD_URL: http://uyeong.com
    ports:
      - 5000:5000
    env_file:
      - ./server/.env
    depends_on:
      - mongodb
    networks:
      - blog

  client-prod:
    container_name: client-prod
    restart: unless-stopped
    build:
      context: ./client
      dockerfile: Dockerfile.prod
    ports:
      - 3000:3000
    env_file:
      - ./client/.env.production
    depends_on:
      - server-prod
    networks:
      - blog

  mongodb:
    image: mongo:7.0.14
    container_name: mongodb
    restart: always
    ports:
      - 27017:27017
    volumes:
      - mongodb:/data/db
    networks:
      - blog

  nginx:
    container_name: nginx
    restart: always
    build:
      context: ./nginx
      dockerfile: Dockerfile.prod
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./certbot/conf:/etc/letsencrypt # Certbot이 생성한 인증서 전달
      - ./certbot/www:/var/www/certbot # Certbot 웹루트 파일 전달
      - ./nginx/ssl-dhparams.pem:/etc/letsencrypt # ssl-dhparams.pem 파일 전달
    depends_on:
      - server-prod
      - client-prod
    networks:
      - blog

  certbot:
    container_name: certbot
    image: certbot/certbot:v3.0.1
    volumes:
      - ./certbot/conf:/etc/letsencrypt # Certbot이 생성한 인증서를 Nginx와 공유
      - ./certbot/www:/var/www/certbot # Certbot 웹루트 파일을 Nginx와 공유
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/certbot --email uyeong.jay@gmail.com --agree-tos --no-eff-email -d uyeong.com -d www.uyeong.com

volumes:
  mongodb:

networks:
  blog:
